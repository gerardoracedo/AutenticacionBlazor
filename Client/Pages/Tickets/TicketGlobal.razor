@page "/Tramite/{GetIdTramite}"
@layout NuevoLayout
@using AutenticacionBlazor.Client.Pages.Global
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IJSRuntime jsRuntime
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@attribute [Authorize(Roles = "super,general,admin")]
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject IModalService Modal
@using AutenticacionBlazor.Shared.Modelos.Global
@using AutenticacionBlazor.Shared.Modelos.Tickets
@using System.IO;
@inject IDialogService DialogService

@if (_show == 1)
{
    <div class="card card-docs mb-2">
        <div class="card-body fs-6 py-10 px-10 py-lg-10 px-lg-10 text-gray-700">
            <div class="pb-5">
                <h1 class="fw-bolder">
                    Tramite N°   @if (string.IsNullOrEmpty(GetIdTramite))
                    {
                        @:None
                    }
                    else
                    {
                        @GetIdTramite
                    } - Alta Actividad comercial
                </h1>
            </div>
            <div class="pb-5">
                <div class="separator separator-dashed mb-5"></div>
                <div class="alert alert-danger d-flex align-items-center p-5 mb-10">
                    <!--begin::Svg Icon | path: icons/duotune/general/gen048.svg-->
                    <span class="svg-icon svg-icon-2hx svg-icon-danger me-4">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                            <path opacity="0.3" d="M20.5543 4.37824L12.1798 2.02473C12.0626 1.99176 11.9376 1.99176 11.8203 2.02473L3.44572 4.37824C3.18118 4.45258 3 4.6807 3 4.93945V13.569C3 14.6914 3.48509 15.8404 4.4417 16.984C5.17231 17.8575 6.18314 18.7345 7.446 19.5909C9.56752 21.0295 11.6566 21.912 11.7445 21.9488C11.8258 21.9829 11.9129 22 12.0001 22C12.0872 22 12.1744 21.983 12.2557 21.9488C12.3435 21.912 14.4326 21.0295 16.5541 19.5909C17.8169 18.7345 18.8277 17.8575 19.5584 16.984C20.515 15.8404 21 14.6914 21 13.569V4.93945C21 4.6807 20.8189 4.45258 20.5543 4.37824Z" fill="black"></path>
                            <path d="M10.5606 11.3042L9.57283 10.3018C9.28174 10.0065 8.80522 10.0065 8.51412 10.3018C8.22897 10.5912 8.22897 11.0559 8.51412 11.3452L10.4182 13.2773C10.8099 13.6747 11.451 13.6747 11.8427 13.2773L15.4859 9.58051C15.771 9.29117 15.771 8.82648 15.4859 8.53714C15.1948 8.24176 14.7183 8.24176 14.4272 8.53714L11.7002 11.3042C11.3869 11.6221 10.874 11.6221 10.5606 11.3042Z" fill="black"></path>
                        </svg>
                    </span>
                    <!--end::Svg Icon-->
                    <div class="d-flex flex-column">
                        <h4 class="mb-1 text-danger">Error!</h4>
                        <span>No puede ver este tramite.</span>
                    </div>
                </div>
            </div>

        </div>
    </div>
}
else if (_show == 2)
{
    <div class="card card-docs mb-2">
        <div class="card-body fs-6 py-10 px-10 py-lg-10 px-lg-10 text-gray-700">
            <div class="pb-5">
                <h1 class="fw-bolder">
                    Tramite N°   @if (string.IsNullOrEmpty(GetIdTramite))
                    {
                        @:None
                    }
                    else
                    {
                        @GetIdTramite
                    } - Alta Actividad comercial
                </h1>
            </div>
            <div class="pb-5">
                <div class="separator separator-dashed mb-5"></div>
                @if (_carga == false)
                {
                    <TicketChat @ref="ticket" NumeroTramite="@GetIdTramite" Respuesta="@_respuesta" />
                }
                <div class="separator separator-dashed mt-3 mb-3"></div>
                <div class="pt-5">
                    <div class="card card-dashed bg-light-primary">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-xl-6">
                                    <h6>Mensaje</h6>
                                    <textarea class="form-control border-1 p-0"
                                              rows="2"
                                              placeholder="Ingrese su mensaje"
                                              style="margin-top: 0px; margin-bottom: 0px; height: 36px; overflow: auto; resize: none;"
                                              @bind="@_msj.Mensaje"/>
                                </div>
                                <div class="col-xl-4">
                                    <h6>Archivos adjuntos</h6>
                                    <InputFile class="form-control" OnChange="@OnInputFileChange" multiple/>
                                </div>
                                <div class="col-xl-2">
                                    <h6>&nbsp;</h6>
                                    <div class="d-grid gap-2">
                                        <button class="btn btn-primary" type="button" @onclick="Enviar">Enviar</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter] public string GetIdTramite { get; set; }
    private bool _carga;
    private MRespuestaBoolMensaje _resultado;
    private MMsjNuevoUploadFiles _msj = new MMsjNuevoUploadFiles();
    private MArchivosUploadRespuesta _archivos;
    private int _respuesta;
    private int _show = 0;
    protected TicketChat ticket;
    string Message = "No file(s) selected";
    IReadOnlyList<IBrowserFile> selectedFiles;
    private List<UploadedFile> parts = new List<UploadedFile>();
    private long maxFileSize = 1024 * 1024 * 25;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();

    }

    protected async Task CargarDatos()
    {
        // Ventana cargando


        await jsRuntime.InvokeVoidAsync("SwalLoading");
        // Verifico si puede ver el tramite
        _resultado = null;
        _resultado = await Http.GetFromJsonAsync<MRespuestaBoolMensaje>("api/Ticket/Tramite/Acceso/" + GetIdTramite);



        if (_resultado.resultado == true)
        {
            // Puede ver el tramite, traer los datos del tramite
            _show = 2;
            _respuesta = _resultado.id;
            _carga = false;
            // cierro ventana cargando
            await jsRuntime.InvokeVoidAsync("SwalCerrar", "1");
        }
        else
        {
            // No puede ver el tramite, mostrar error
            _show = 1;
            _respuesta = _resultado.id;
            _carga = false;
            // cierro ventana cargando
            await jsRuntime.InvokeVoidAsync("SwalCerrar", "1");
        }
    }

    private async Task Enviar()
    {
        _carga = true;
        if (selectedFiles != null)
        {
            foreach (var file in selectedFiles)
            {
                Stream stream = file.OpenReadStream(maxFileSize);
                MemoryStream ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                stream.Close();
                string _extension = Path.GetExtension(file.Name);
                parts.Add(new UploadedFile() { FileName = file.Name, FileType = file.ContentType, FileContent = ms.ToArray() });
                ms.Close();
            }

            _msj.ArchivosGuardar = parts;
        }
        //TODO: Archivos
        _msj.Id_ticket = Convert.ToInt32(GetIdTramite);
        _msj.Estado = 1;
        if (_msj.Mensaje != null)
        {
            using var response = await Http.PostAsJsonAsync("api/Ticket/Tramite/InsertMsj", _msj);
            _resultado = await response.Content.ReadFromJsonAsync<MRespuestaBoolMensaje>();
        }
        else
        {
            OpenDialog();
        }
        if(_resultado.resultado)
        {
            _carga = false;
            _msj = new MMsjNuevoUploadFiles();
            selectedFiles = null;
        }
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} file(s) selected";
        this.StateHasChanged();
    }

    private void OpenDialog()
    {
		var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<Dialog>("  Ingrese un mensaje...  ", options);
    }
}
