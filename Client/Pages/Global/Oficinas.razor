@page "/Global/Oficinas"
@layout NuevoLayout
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http
@attribute [Authorize(Roles = "admin, super")]
@using AutenticacionBlazor.Shared.Modelos.Identity
@using AutenticacionBlazor.Shared.Modelos.Global
@inject NavigationManager NavigationManager
@inject IModalService Modal
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Newtonsoft.Json
@inject IJSRuntime jsRuntime

<AuthorizeView>
    <Authorized>
        <div class="card card-custom gutter-b">
            <div class="card-header border-0 py-5">
                <h3 class="card-title align-items-start flex-column">
                    <span class="card-label font-weight-bolder text-dark font-size-h2 pt-2">Oficinas:</span>
                </h3>
            </div>
        </div>
        @if (oficinas == null)
        {
            <div class="row">
                <div class="col-12">
                    <div class="spinner spinner-track spinner-primary spinner-lg mr-15" style="margin-left: 43%;"></div>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-12">
                    <p style="margin-left: 43%;"><b>Cargando...</b></p>
                </div>
            </div>
        }
        else
        {
            <div class="card rounded border p-10">
                <div class="table-responsive">
                    <table id="table-data-oficinas" class="table table-striped gy-7 gs-7">
                        <thead>
                            <tr class="fw-bold fs-6 text-gray-800">
                                <th>Id_Oficina</th>
                                <th>Estado</th>
                                <th>Oficina</th>
                                <th>Depende</th>
                                <th>Código</th>
                                <th>Pilar</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var oficina in oficinas)
                            {
                                <tr>
                                    <td>@oficina.Id_Oficina</td>
                                    <td>@oficina.Estado</td>
                                    <td>@oficina.Oficina</td>
                                    <td>@oficina.Depende</td>
                                    <td>@oficina.Codigo</td>
                                    <td>@oficina.Pilar</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <br>
        }
    </Authorized>
    <NotAuthorized>
        <p>&nbsp;</p>
    </NotAuthorized>
</AuthorizeView>

@code
{
    private MOficina[] oficinas;
    private string _usuario;
    //private string term = new string("");

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userAuth = authState.User;
            _usuario = authState.User.Claims.ToList().FirstOrDefault(x => x.Type == "sub").Value;

            await CargaDatos();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRuntime.InvokeVoidAsync("ListaOficinas");
    }

    protected async Task QuitarDataTable()
    {
        await jsRuntime.InvokeVoidAsync("QuitarDataTable", "table-data-oficinas");
    }
    protected async Task CargarDataTable()
    {
        await jsRuntime.InvokeVoidAsync("CargarDataTable", "table-data-oficinas");
    }

    protected async Task CargaDatos()
    {
        oficinas = await Http.GetFromJsonAsync<MOficina[]>("api/Global/GetOficinas");
        if (oficinas != null)
        {
            await CargarDataTable();
        }
    }

}
