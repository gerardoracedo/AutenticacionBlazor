@layout NuevoLayout
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http
@attribute [Authorize(Roles = "admin, super, general")]
@using AutenticacionBlazor.Shared.Modelos.Identity
@using AutenticacionBlazor.Shared.Modelos.Global
@using AutenticacionBlazor.Shared.Modelos.Personas.Fisica
@inject NavigationManager NavigationManager
@inject IModalService Modal
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime jsRuntime
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage

@if (mis_mails == null)
{
    <div class="row">
        <div class="col-12">
            <div class="spinner spinner-track spinner-primary spinner-lg mr-15"
                    style="margin-left: 43%;"></div>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-12">
            <p style="margin-left: 43%;"><b>Cargando...</b></p>
        </div>
    </div>
}
else
{
    <div class="card card-custom gutter-b">
        <div class="card-header border-0 py-5">
            <h3 class="card-title align-items-start flex-column">
                <span class="card-label font-weight-bolder text-dark font-size-h2 pt-2">Mis Mails</span>
            </h3>
            <div class="card-toolbar">
                <div @onclick="Alta" class="btn btn-success font-weight-bolder font-size-sm">
                    <span class="svg-icon svg-icon-md svg-icon-white">
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                <rect x="0" y="0" width="24" height="24" />
                                <circle fill="#000000" opacity="0.3" cx="12" cy="12" r="10" />
                                <path d="M11,11 L11,7 C11,6.44771525 11.4477153,6 12,6 C12.5522847,6 13,6.44771525 13,7 L13,11 L17,11 C17.5522847,11 18,11.4477153 18,12 C18,12.5522847 17.5522847,13 17,13 L13,13 L13,17 C13,17.5522847 12.5522847,18 12,18 C11.4477153,18 11,17.5522847 11,17 L11,13 L7,13 C6.44771525,13 6,12.5522847 6,12 C6,11.4477153 6.44771525,11 7,11 L11,11 Z" fill="#000000" />
                            </g>
                        </svg>
                    </span>Agregar mail
                </div>
            </div>
        </div>
    </div>
    <div class="card rounded border p-10">
        <div class="table-responsive">
            <table id="table-data-mails" class="table table-striped table-hover gy-7 gs-7">
                <thead class="bg-dark">
                    <tr class="fw-boldest fs-6 text-gray-800">
                        <th class="align-middle text-nowrap text-light py-3">#</th>
                        <th class="align-middle text-nowrap text-light py-3">Mail</th>
                        <th class="align-middle text-nowrap text-light py-3">Descripción</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var mail in mis_mails)
                    {
                        <tr>
                            <td class="align-middle text-nowrap py-3">
                                <div role="group">
                                    <button type="button"
                                            class="btn btn-icon btn-primary btn-sm me-1"
                                            @onclick="@(() => Editar(mail.Id))">
                                        <!--begin::Svg Icon | path: icons/duotune/art/art005.svg-->
                                        <span class="svg-icon svg-icon-3">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                                                <path opacity="0.3" d="M21.4 8.35303L19.241 10.511L13.485 4.755L15.643 2.59595C16.0248 2.21423 16.5426 1.99988 17.0825 1.99988C17.6224 1.99988 18.1402 2.21423 18.522 2.59595L21.4 5.474C21.7817 5.85581 21.9962 6.37355 21.9962 6.91345C21.9962 7.45335 21.7817 7.97122 21.4 8.35303ZM3.68699 21.932L9.88699 19.865L4.13099 14.109L2.06399 20.309C1.98815 20.5354 1.97703 20.7787 2.03189 21.0111C2.08674 21.2436 2.2054 21.4561 2.37449 21.6248C2.54359 21.7934 2.75641 21.9115 2.989 21.9658C3.22158 22.0201 3.4647 22.0084 3.69099 21.932H3.68699Z" fill="black"></path>
                                                <path d="M5.574 21.3L3.692 21.928C3.46591 22.0032 3.22334 22.0141 2.99144 21.9594C2.75954 21.9046 2.54744 21.7864 2.3789 21.6179C2.21036 21.4495 2.09202 21.2375 2.03711 21.0056C1.9822 20.7737 1.99289 20.5312 2.06799 20.3051L2.696 18.422L5.574 21.3ZM4.13499 14.105L9.891 19.861L19.245 10.507L13.489 4.75098L4.13499 14.105Z" fill="black"></path>
                                            </svg>
                                        </span>
                                        <!--end::Svg Icon-->
                                    </button>
                                    <button type="button"
                                            class="btn btn-icon btn-danger btn-sm me-1"
                                            @onclick="@(() => Eliminar(mail))">
                                        <!--begin::Svg Icon | path: icons/duotune/art/art005.svg-->
                                        <span class="svg-icon svg-icon-3">
                                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                                                <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                                    <rect x="0" y="0" width="24" height="24" />
                                                    <path d="M6,8 L18,8 L17.106535,19.6150447 C17.04642,20.3965405 16.3947578,21 15.6109533,21 L8.38904671,21 C7.60524225,21 6.95358004,20.3965405 6.89346498,19.6150447 L6,8 Z M8,10 L8.45438229,14.0894406 L15.5517885,14.0339036 L16,10 L8,10 Z" fill="#000000" fill-rule="nonzero" />
                                                    <path d="M14,4.5 L14,3.5 C14,3.22385763 13.7761424,3 13.5,3 L10.5,3 C10.2238576,3 10,3.22385763 10,3.5 L10,4.5 L5.5,4.5 C5.22385763,4.5 5,4.72385763 5,5 L5,5.5 C5,5.77614237 5.22385763,6 5.5,6 L18.5,6 C18.7761424,6 19,5.77614237 19,5.5 L19,5 C19,4.72385763 18.7761424,4.5 18.5,4.5 L14,4.5 Z" fill="#000000" opacity="0.3" />
                                                </g>
                                            </svg>
                                        </span>
                                        <!--end::Svg Icon-->
                                    </button>
                                </div>
                            </td>
                            <td class="align-middle text-nowrap py-3">@(@mail.Email)</td>
                            <td class="align-middle text-nowrap py-3">@(@mail.Descripcion)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code
{
    [CascadingParameter] public Task<AuthenticationState> authenticationState { get; set; }
    private MEmail[] mis_mails;
    private string uidpf;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CargaDatos();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRuntime.InvokeVoidAsync("ListaMail");
    }

    protected async Task QuitarDataTable()
    {
        await jsRuntime.InvokeVoidAsync("QuitarDataTable", "table-data-mails");
    }
    protected async Task CargarDataTable()
    {
        await jsRuntime.InvokeVoidAsync("CargarDataTable", "table-data-mails");
    }

    protected async Task CargaDatos()
    {

        try
        {
            uidpf = localStorage.GetItem<string>("uidpf");
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.IsInRole("EditarPersonaFisica") && uidpf != null)
            {
                mis_mails = await Http.GetFromJsonAsync<MEmail[]>("api/Global/GetMailsByUid/" + uidpf);
            }
            else
            {
                mis_mails = await Http.GetFromJsonAsync<MEmail[]>("api/Global/GetMisMails");
            }

            if (mis_mails != null)
            {
                await CargarDataTable();
                await jsRuntime.InvokeVoidAsync("SwalCerrar", "2");
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            await jsRuntime.InvokeAsync<bool>("SwalNormal", "Oops...", "No se pudo realizar la consulta.", "error", false);
            exception.Redirect();
        }
    }

    public async Task Alta()
    {
        await jsRuntime.InvokeVoidAsync("SwalLoading");
        await QuitarDataTable();

        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
            UseCustomLayout = true,
            ContentScrollable = true
        };
        var myModal = Modal.Show<Global.MailAlta>("Alta Mail", options);
        var result = await myModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await CargarDataTable();
        }
        else
        {
            await CargaDatos();
            await CargarDataTable();
        }
    }

    public async Task Editar(int Id)
    {
        await jsRuntime.InvokeVoidAsync("SwalLoading");
        await QuitarDataTable();
        var parameters = new ModalParameters();
        parameters.Add(nameof(Global.MailEditar.id), Id);
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
            UseCustomLayout = true,
            ContentScrollable = true
        };
        var myModal = Modal.Show<Global.MailEditar>("Editar Mail", parameters, options);
        var result = await myModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await CargarDataTable();
        }
        else
        {
            await CargaDatos();
            await CargarDataTable();
        }
    }

    protected async Task Eliminar(MEmail Mail)
    {
        await QuitarDataTable();
        string ApiPath = "api/Global/DeleteMail/";
        var parameters = new ModalParameters();
        parameters.Add(nameof(Global.ModalEliminar.modelo), Mail);
        parameters.Add(nameof(Global.ModalEliminar.apiPath), ApiPath);

        var options = new ModalOptions()
        {
            HideCloseButton = true
        };
        var myModal = Modal.Show<Global.ModalEliminar>(null, parameters, options);
        var result = await myModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await CargarDataTable();
        }
        else
        {
            await CargaDatos();
            await CargarDataTable();
        }
    }
}
